%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 973.250000 360.250000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 974 361
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 974 361
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: THSarabunNew-Bold
%!FontType1-1.0: THSarabunNew-Bold 1.0000.1.0030
14 dict begin/FontName /THSarabunNew-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /q put
dup 36 /u put
dup 37 /n put
dup 38 /c put
dup 39 /C put
dup 40 /h put
dup 41 /o put
dup 42 /i put
dup 43 /I put
dup 44 /t put
dup 45 /r put
dup 46 /a put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -466 1 index div -457 2 index div 947 3 index div 844 5 -1 roll div]cvx def
/sfnts [<










00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/C 1 def
/I 2 def
/S 3 def
/a 4 def
/c 5 def
/e 6 def
/h 7 def
/i 8 def
/n 9 def
/o 10 def
/q 11 def
/r 12 def
/t 13 def
/u 14 def
/nonmarkingreturn 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-466 -457 947 844}def
/UniqueID 4138507 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA920BC2E50FEF39D6B1F5DD4EAAD2CF4DE7EC3C649509A309092850EA2E2AE9A367CE2A5926017A438554747BB1A061B600FECE3D922DD7567A4E9937762379E6FFBF1E239500CB18BB880F17BCE91A6D01D1D7C3CEDE8D8FA4FF8904248686355C7FACCE7D467150C5BB96AB10792D95DF2E41A44B092B352A4211AC9173C953CA7E3CA7F41FFF197432782B33E9742DE1D2FF7453018CAEE714E5635D74D7E68450DD3908312D03B9B8053CCFADA4C3471D7FDEC52A7BB61AE180E9869C25088305E922FC9858A7950AD93156E304BB8B8E67A93592F68A830DCAF586282066D0705C36097C09F195AF17F2388561FEC856494B6DD3017F2657D0FD78A3CE277B4F21EF5861CE85EB2DF172B0A801BBC0EAABC542286FB3C0CB675B25B37C1BE92B3C0DD2C86BB4653CF5E82C031FFA272BBB92C50ABD12F5F7727AB32F4DD121AC14CEE0A6091B5A56E0178F510C2BA14C3F0972BF2AF0357B3593E333DEAD0632302E6FB7C001AD44724C97E4E44B4C734A2F084DFAE6DFC4F3653C7160B0DD3F5A9D70062D493762F677DD6E6EE83F381CCD9394BA190F4BD4B9D43285BADE1AF1387EBDD304E498994D0008E24DE7EA61D7F368CDDC749322553BC5219CC00E50009BA7AE6D13C70173A4E307EB26EBB5E599D8A90AB6A61EA23E216CA7EA653ED7252238ABF05F7454AA6F28939B28C62C6DF26F09C09AD3A2BA646445D1FDDDC16B4
387CCA7949F980B2BD4821CD382961CCAC7E982854674BD981085E844A574BE0ABB677D6A20029109DD52352FDCA20534107268F583FEEA30188BD66E89992FE629098C65CFBAE6ECA34E72FA54C6AE6492091757EBED775776C8D840F8A1F66D41A53FDEE39443E43E3DF75613C2DD2A1D3AB37899C65E966B59D959C433B54389C293A4502C14DD83AB8D3C7B17DF1D56CBED8DA72819E9B9DCD1D30155DC6A140FA6DC4A0435E878AB35DBC9DDE79A5917BDD57BE5D34EADEAC4B18A72EE40FD3B29FE41EF7752389A55B70E7A027405DDDB3723747EBF7D18CB7DBEDD8E149AD33B8D71FFE8CDCFDF09FDDEAC823C78938370709EEAE5D582CFC09011E5C56415DFCF9A73802976497534A50E8FB79B940E9E4A43907A3B09FD4F568F46F41DFABA94296D130EA2938EA3DA19D6DC2D968720F42808EED0D0AA44399CA69DC5C51216F09BA4D18F23A174C79DCD62D642B4A4F8C6635B3B47835422DAE03800F38C523AF222328912C267A9F7D5A46BDB5C2B0B145523CA3EF0528955834A3DB3AABEE4BCA7599DF8E7157FA227004983093AF94C28C23E5F9FEC1CA57A43E1C4B72DC2AF209B5330BB20195380BAB99C3F761482A41DAF7827306AD211171CACA963EE2E0A8EBC25B95D11AF8E0B64B5BA78E7FA36DCD20590429964A7224AF2E3F70EF692FA0D04B3165E6B59DDA9899DEAE67D0D2F8F0C7C2B68B7B137B19D83F1BD56F899A52273FD1D199CBA3FE4B6ED7B9644FA79958055E5CB177599113BCD0FB98D1AE2D9B5AB58110B22DD9E24916CDA88CC5DBE62D3B104486B2EDFBADF046B021A2E0FC29CA6814AB31B1E2C1EF123D0AF858E6D1140A0F7CF3AA64070D5349DE27E83B861001586E2DDCCA6E10AF57D69D3999B12FAB324CDA2D7F91F9E7CAD32C357CEBB34F92E3BF0F9F594711933319DC86F696EF6F504DCE097FF697F666CB99A4D2A89DA065E977B23DF2394581E0DBA2571828EA0264B1521DC51FFCF98C55872934DFB0D89BCBB286BF50AD3ADE4A027D4B9E91FF1F58542C489883ED0DD420F131B726F7618FBA73D4186F7E7439CA90FFE47D6B4E9FC94DB9C3DC87C6A6150C00441C0C91E5FED037467880EAC449A6783083047D908F5504C9F67679BA967AEBF67C9AF51F19E3D1BD187E7EC2EB39A8900376E64AB3523634949B2E0C72843475F01A69D3F85D1B7F4ABAAAD21C99F5B58FF62388B0D674BED5ADD0D87999B5FDFE19EC1477625C018C7574299291568A7A6F4B9127EFBD67E6805D6EEBEB05C2327018C5A41E73EB405B2ACF7CEA31DA429A7AFD5E73FF50A0017D02104AFADB548FAAA9F8469C7D63B72A36C19AB4ED513FD32AD1B1541650E94FA7B3E5948C225E75D9C4E854BCB6C1B44998BAD708E98248303F433136B7F123B3C222F874D8B01E27D4B2AED0CA06AC9C77A40180FCD3
0A181188FB4A9552D02DCD1899B4399D8B025C8DF313D2D48F3F17203883C0225583356E646D7EA12AA9C12F880927B6A789F70FA6C6ADF2B0A98F63E8F9164209AD4CB1FF8AC780132924BA891A7502B7DEEDE46A77B5791B74F6D1D899D4C2BE2DFB7062E54203CEA628B9E4ABDE9CC801CDF9B67DCB23148C6ECBB68A48D98C96ADF3DBED4ACD7CE03770B83911B7464606CB7AC6F61F1D8A0B9BDD254BED8C2D9A8C3011B8A20D279DF78E1537AAA678
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/THSarabunNew-Bold cguidfix
/F1.1/THSarabunNew-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 973.25 360.25 rc
-1063.875 435.125 m
1222.125 435.125 l
1222.125 -1760.875 l
-1063.875 -1760.875 l
h
-1063.875 435.125 m
f
81.716866 337.21686 m
92.261063 326.6727 92.261063 309.5773 81.716866 299.03314 c
71.172714 288.48892 54.077286 288.48892 43.533138 299.03314 c
32.988937 309.5773 32.988937 326.6727 43.533138 337.21686 c
54.077286 347.76108 71.172714 347.76108 81.716866 337.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1145.5919 97.908134 m
1156.1361 108.45229 1156.1361 125.54771 1145.5919 136.09186 c
1135.0477 146.63606 1117.9523 146.63606 1107.4081 136.09186 c
1096.8639 125.54771 1096.8639 108.45229 1107.4081 97.908134 c
1117.9523 87.363937 1135.0477 87.363937 1145.5919 97.908134 c
S
0 i
1 1 1 sc
CM
81.716866 139.21686 m
92.261063 128.67271 92.261063 111.57729 81.716866 101.03313 c
71.172714 90.488937 54.077286 90.488937 43.533138 101.03313 c
32.988937 111.57729 32.988937 128.67271 43.533138 139.21686 c
54.077286 149.76106 71.172714 149.76106 81.716866 139.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1145.5919 295.90814 m
1156.1361 306.4523 1156.1361 323.5477 1145.5919 334.09186 c
1135.0477 344.63608 1117.9523 344.63608 1107.4081 334.09186 c
1096.8639 323.5477 1096.8639 306.4523 1107.4081 295.90814 c
1117.9523 285.36392 1135.0477 285.36392 1145.5919 295.90814 c
S
1126.5 144.00002 m
1126.5 278.09998 l
S
0 i
CM
62.625 149.02501 m
65.625 157.02501 l
59.625 157.02501 l
h
62.625 149.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1126.5 286.09998 m
1129.5 278.09998 l
1123.5 278.09998 l
h
1126.5 286.09998 m
S
/Cs2 SC
0 sc
1 0 0 -1 62.625 38.125 cm
/F1.1[ 30 0 0 -30 0 0]sf
-47.355 5.0500183 m
(!"#$"%&")[ 10.950000 11.730000 12.930000 12.540000 11.730000 12.690000 10.410000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
297.34186 337.21686 m
307.88608 326.6727 307.88608 309.5773 297.34186 299.03314 c
286.7977 288.48892 269.7023 288.48892 259.15814 299.03314 c
248.61394 309.5773 248.61394 326.6727 259.15814 337.21686 c
269.7023 347.76108 286.7977 347.76108 297.34186 337.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1361.2169 97.908134 m
1371.7611 108.45229 1371.7611 125.54771 1361.2169 136.09186 c
1350.6727 146.63606 1333.5773 146.63606 1323.0331 136.09186 c
1312.4889 125.54771 1312.4889 108.45229 1323.0331 97.908134 c
1333.5773 87.363937 1350.6727 87.363937 1361.2169 97.908134 c
S
0 i
1 1 1 sc
CM
297.34186 139.21686 m
307.88608 128.67271 307.88608 111.57729 297.34186 101.03313 c
286.7977 90.488937 269.7023 90.488937 259.15814 101.03313 c
248.61394 111.57729 248.61394 128.67271 259.15814 139.21686 c
269.7023 149.76106 286.7977 149.76106 297.34186 139.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1361.2169 295.90814 m
1371.7611 306.4523 1371.7611 323.5477 1361.2169 334.09186 c
1350.6727 344.63608 1333.5773 344.63608 1323.0331 334.09186 c
1312.4889 323.5477 1312.4889 306.4523 1323.0331 295.90814 c
1333.5773 285.36392 1350.6727 285.36392 1361.2169 295.90814 c
S
0 i
1 1 1 sc
CM
160.15814 238.21686 m
170.70229 248.76106 187.79771 248.76106 198.34186 238.21686 c
208.88606 227.67271 208.88606 210.57729 198.34186 200.03314 c
187.79771 189.48894 170.70229 189.48894 160.15814 200.03314 c
149.61394 210.57729 149.61394 227.67271 160.15814 238.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1224.0331 196.90814 m
1234.5773 186.36394 1251.6727 186.36394 1262.2169 196.90814 c
1272.7611 207.45229 1272.7611 224.54771 1262.2169 235.09186 c
1251.6727 245.63606 1234.5773 245.63606 1224.0331 235.09186 c
1213.4889 224.54771 1213.4889 207.45229 1224.0331 196.90814 c
S
0 i
1 1 1 sc
CM
358.15814 238.21686 m
368.7023 248.76106 385.7977 248.76106 396.34186 238.21686 c
406.88608 227.67271 406.88608 210.57729 396.34186 200.03314 c
385.7977 189.48894 368.7023 189.48894 358.15814 200.03314 c
347.61392 210.57729 347.61392 227.67271 358.15814 238.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1422.0331 196.90814 m
1432.5773 186.36394 1449.6727 186.36394 1460.2169 196.90814 c
1470.7611 207.45229 1470.7611 224.54771 1460.2169 235.09186 c
1449.6727 245.63606 1432.5773 245.63606 1422.0331 235.09186 c
1411.4889 224.54771 1411.4889 207.45229 1422.0331 196.90814 c
S
1361.2169 136.09186 m
1415.0328 189.90778 l
S
0 i
CM
356.81464 239.56036 m
353.27911 247.33855 l
349.03647 243.0959 l
h
356.81464 239.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1420.6896 195.56464 m
1417.1541 187.78645 l
1412.9115 192.0291 l
h
1420.6896 195.56464 m
S
1 J
1 j
0.60000002 i
1323.0331 136.09186 m
1269.2172 189.90778 l
S
0 i
CM
199.68536 239.56036 m
207.46355 243.0959 l
203.2209 247.33855 l
h
199.68536 239.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1263.5604 195.56464 m
1271.3385 192.0291 l
1267.0959 187.78645 l
h
1263.5604 195.56464 m
S
1 J
1 j
0.60000002 i
1262.2169 235.09186 m
1316.0328 288.90778 l
S
0 i
CM
257.81464 140.56036 m
254.2791 148.33855 l
250.03645 144.0959 l
h
257.81464 140.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1321.6896 294.56464 m
1318.1541 286.78647 l
1313.9115 291.02911 l
h
1321.6896 294.56464 m
S
1 J
1 j
0.60000002 i
1422.0331 235.09186 m
1368.2172 288.90778 l
S
0 i
CM
298.68536 140.56036 m
306.46353 144.0959 l
302.22089 148.33855 l
h
298.68536 140.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1362.5604 294.56464 m
1370.3385 291.02911 l
1366.0959 286.78647 l
h
1362.5604 294.56464 m
S
1 1 1 sc
CM
576.34186 337.21686 m
586.88605 326.6727 586.88605 309.5773 576.34186 299.03314 c
565.79773 288.48892 548.70227 288.48892 538.15814 299.03314 c
527.61395 309.5773 527.61395 326.6727 538.15814 337.21686 c
548.70227 347.76108 565.79773 347.76108 576.34186 337.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1640.2169 97.908134 m
1650.7611 108.45229 1650.7611 125.54771 1640.2169 136.09186 c
1629.6727 146.63606 1612.5773 146.63606 1602.0331 136.09186 c
1591.4889 125.54771 1591.4889 108.45229 1602.0331 97.908134 c
1612.5773 87.363937 1629.6727 87.363937 1640.2169 97.908134 c
S
0 i
1 1 1 sc
CM
576.34186 139.21686 m
586.88605 128.67271 586.88605 111.57729 576.34186 101.03313 c
565.79773 90.488937 548.70227 90.488937 538.15814 101.03313 c
527.61395 111.57729 527.61395 128.67271 538.15814 139.21686 c
548.70227 149.76106 565.79773 149.76106 576.34186 139.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1640.2169 295.90814 m
1650.7611 306.4523 1650.7611 323.5477 1640.2169 334.09186 c
1629.6727 344.63608 1612.5773 344.63608 1602.0331 334.09186 c
1591.4889 323.5477 1591.4889 306.4523 1602.0331 295.90814 c
1612.5773 285.36392 1629.6727 285.36392 1640.2169 295.90814 c
S
0 i
1 1 1 sc
CM
439.15814 238.21686 m
449.7023 248.76106 466.7977 248.76106 477.34186 238.21686 c
487.88608 227.67271 487.88608 210.57729 477.34186 200.03314 c
466.7977 189.48894 449.7023 189.48894 439.15814 200.03314 c
428.61392 210.57729 428.61392 227.67271 439.15814 238.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1503.0331 196.90814 m
1513.5773 186.36394 1530.6727 186.36394 1541.2169 196.90814 c
1551.7611 207.45229 1551.7611 224.54771 1541.2169 235.09186 c
1530.6727 245.63606 1513.5773 245.63606 1503.0331 235.09186 c
1492.4889 224.54771 1492.4889 207.45229 1503.0331 196.90814 c
S
0 i
1 1 1 sc
CM
637.15814 238.21686 m
647.70227 248.76106 664.79773 248.76106 675.34186 238.21686 c
685.88605 227.67271 685.88605 210.57729 675.34186 200.03314 c
664.79773 189.48894 647.70227 189.48894 637.15814 200.03314 c
626.61395 210.57729 626.61395 227.67271 637.15814 238.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1701.0331 196.90814 m
1711.5773 186.36394 1728.6727 186.36394 1739.2169 196.90814 c
1749.7611 207.45229 1749.7611 224.54771 1739.2169 235.09186 c
1728.6727 245.63606 1711.5773 245.63606 1701.0331 235.09186 c
1690.4889 224.54771 1690.4889 207.45229 1701.0331 196.90814 c
S
1640.2169 136.09186 m
1694.0328 189.90778 l
S
0 i
CM
635.81464 239.56036 m
632.27911 247.33855 l
628.03644 243.0959 l
h
635.81464 239.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1699.6896 195.56464 m
1696.1541 187.78645 l
1691.9115 192.0291 l
h
1699.6896 195.56464 m
S
1 J
1 j
0.60000002 i
1602.0331 136.09186 m
1548.2172 189.90778 l
S
0 i
CM
478.68536 239.56036 m
486.46353 243.0959 l
482.22089 247.33855 l
h
478.68536 239.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1542.5604 195.56464 m
1550.3385 192.0291 l
1546.0959 187.78645 l
h
1542.5604 195.56464 m
S
1 J
1 j
0.60000002 i
1541.2169 235.09186 m
1595.0328 288.90778 l
S
0 i
CM
536.81464 140.56036 m
533.27911 148.33855 l
529.03644 144.0959 l
h
536.81464 140.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1600.6896 294.56464 m
1597.1541 286.78647 l
1592.9115 291.02911 l
h
1600.6896 294.56464 m
S
1 J
1 j
0.60000002 i
1701.0331 235.09186 m
1647.2172 288.90778 l
S
0 i
CM
577.68536 140.56036 m
585.46356 144.0959 l
581.22089 148.33855 l
h
577.68536 140.56036 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1641.5604 294.56464 m
1649.3385 291.02911 l
1645.0959 286.78647 l
h
1641.5604 294.56464 m
S
1 1 1 sc
CM
576.34186 238.21686 m
586.88605 227.67271 586.88605 210.57729 576.34186 200.03314 c
565.79773 189.48894 548.70227 189.48894 538.15814 200.03314 c
527.61395 210.57729 527.61395 227.67271 538.15814 238.21686 c
548.70227 248.76106 565.79773 248.76106 576.34186 238.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1640.2169 196.90814 m
1650.7611 207.45229 1650.7611 224.54771 1640.2169 235.09186 c
1629.6727 245.63606 1612.5773 245.63606 1602.0331 235.09186 c
1591.4889 224.54771 1591.4889 207.45229 1602.0331 196.90814 c
1612.5773 186.36394 1629.6727 186.36394 1640.2169 196.90814 c
S
1621.125 144.00002 m
1621.125 179.09999 l
S
0 i
CM
557.25 248.02501 m
560.25 256.02502 l
554.25 256.02502 l
h
557.25 248.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1621.125 187.09999 m
1624.125 179.09999 l
1618.125 179.09999 l
h
1621.125 187.09999 m
S
1 J
1 j
0.60000002 i
1621.125 243.00002 m
1621.125 278.09998 l
S
0 i
CM
557.25 149.02501 m
560.25 157.02501 l
554.25 157.02501 l
h
557.25 149.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1621.125 286.09998 m
1624.125 278.09998 l
1618.125 278.09998 l
h
1621.125 286.09998 m
S
/Cs2 SC
0 sc
1 0 0 -1 417.75 38.125 cm
-32.52 5.0500183 m
('\(\)*&")[ 12.960000 12.690000 12.360000 4.890000 10.410000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
800.21686 340.21686 m
810.76105 329.6727 810.76105 312.5773 800.21686 302.03314 c
789.67273 291.48892 772.57727 291.48892 762.03314 302.03314 c
751.48895 312.5773 751.48895 329.6727 762.03314 340.21686 c
772.57727 350.76108 789.67273 350.76108 800.21686 340.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1864.0919 94.908134 m
1874.6361 105.45229 1874.6361 122.54771 1864.0919 133.09186 c
1853.5477 143.63606 1836.4523 143.63606 1825.9081 133.09186 c
1815.3639 122.54771 1815.3639 105.45229 1825.9081 94.908134 c
1836.4523 84.363937 1853.5477 84.363937 1864.0919 94.908134 c
S
0 i
1 1 1 sc
CM
800.21686 142.21686 m
810.76105 131.67271 810.76105 114.57729 800.21686 104.03313 c
789.67273 93.488937 772.57727 93.488937 762.03314 104.03313 c
751.48895 114.57729 751.48895 131.67271 762.03314 142.21686 c
772.57727 152.76106 789.67273 152.76106 800.21686 142.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1864.0919 292.90814 m
1874.6361 303.4523 1874.6361 320.5477 1864.0919 331.09186 c
1853.5477 341.63608 1836.4523 341.63608 1825.9081 331.09186 c
1815.3639 320.5477 1815.3639 303.4523 1825.9081 292.90814 c
1836.4523 282.36392 1853.5477 282.36392 1864.0919 292.90814 c
S
0 i
1 1 1 sc
CM
800.21686 241.21686 m
810.76105 230.67271 810.76105 213.57729 800.21686 203.03314 c
789.67273 192.48894 772.57727 192.48894 762.03314 203.03314 c
751.48895 213.57729 751.48895 230.67271 762.03314 241.21686 c
772.57727 251.76106 789.67273 251.76106 800.21686 241.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
1864.0919 193.90814 m
1874.6361 204.45229 1874.6361 221.54771 1864.0919 232.09186 c
1853.5477 242.63606 1836.4523 242.63606 1825.9081 232.09186 c
1815.3639 221.54771 1815.3639 204.45229 1825.9081 193.90814 c
1836.4523 183.36394 1853.5477 183.36394 1864.0919 193.90814 c
S
1845 141.00002 m
1845 176.09999 l
S
0 i
CM
781.125 251.02501 m
784.125 259.02502 l
778.125 259.02502 l
h
781.125 251.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1845 184.09999 m
1848 176.09999 l
1842 176.09999 l
h
1845 184.09999 m
S
1 1 1 sc
CM
953.21686 340.21686 m
963.76105 329.6727 963.76105 312.5773 953.21686 302.03314 c
942.67273 291.48892 925.57727 291.48892 915.03314 302.03314 c
904.48895 312.5773 904.48895 329.6727 915.03314 340.21686 c
925.57727 350.76108 942.67273 350.76108 953.21686 340.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
2017.0919 94.908134 m
2027.6361 105.45229 2027.6361 122.54771 2017.0919 133.09186 c
2006.5477 143.63606 1989.4523 143.63606 1978.9081 133.09186 c
1968.3639 122.54771 1968.3639 105.45229 1978.9081 94.908134 c
1989.4523 84.363937 2006.5477 84.363937 2017.0919 94.908134 c
S
0 i
1 1 1 sc
CM
953.21686 142.21686 m
963.76105 131.67271 963.76105 114.57729 953.21686 104.03313 c
942.67273 93.488937 925.57727 93.488937 915.03314 104.03313 c
904.48895 114.57729 904.48895 131.67271 915.03314 142.21686 c
925.57727 152.76106 942.67273 152.76106 953.21686 142.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
2017.0919 292.90814 m
2027.6361 303.4523 2027.6361 320.5477 2017.0919 331.09186 c
2006.5477 341.63608 1989.4523 341.63608 1978.9081 331.09186 c
1968.3639 320.5477 1968.3639 303.4523 1978.9081 292.90814 c
1989.4523 282.36392 2006.5477 282.36392 2017.0919 292.90814 c
S
0 i
1 1 1 sc
CM
953.21686 241.21686 m
963.76105 230.67271 963.76105 213.57729 953.21686 203.03314 c
942.67273 192.48894 925.57727 192.48894 915.03314 203.03314 c
904.48895 213.57729 904.48895 230.67271 915.03314 241.21686 c
925.57727 251.76106 942.67273 251.76106 953.21686 241.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1063.875 435.125 cm
2017.0919 193.90814 m
2027.6361 204.45229 2027.6361 221.54771 2017.0919 232.09186 c
2006.5477 242.63606 1989.4523 242.63606 1978.9081 232.09186 c
1968.3639 221.54771 1968.3639 204.45229 1978.9081 193.90814 c
1989.4523 183.36394 2006.5477 183.36394 2017.0919 193.90814 c
S
1998 141.00002 m
1998 176.09999 l
S
0 i
CM
934.125 251.02501 m
937.125 259.02502 l
931.125 259.02502 l
h
934.125 251.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1998 184.09999 m
2001 176.09999 l
1995 176.09999 l
h
1998 184.09999 m
S
1 J
1 j
0.60000002 i
1998 240.00002 m
1998 275.09998 l
S
0 i
CM
934.125 152.02501 m
937.125 160.02501 l
931.125 160.02501 l
h
934.125 152.02501 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1998 283.09998 m
2001 275.09998 l
1995 275.09998 l
h
1998 283.09998 m
S
1 J
1 j
0.60000002 i
1871.2092 120.50362 m
1934.7277 148.92386 1925.8967 257.94391 1878.6254 297.62778 c
S
0 i
CM
808.27643 132.80022 m
816.51343 135.06998 l
812.98999 139.92642 l
h
808.27643 132.80022 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1872.1515 302.32477 m
1880.3884 300.05502 l
1876.865 295.19858 l
h
1872.1515 302.32477 m
S
1 J
1 j
0.60000002 i
1818.3398 208.71681 m
1776.1226 193.60255 1773.1171 142.58727 1809.3234 122.36134 c
S
0 i
CM
752.73376 316.05881 m
744.20837 315.49539 l
746.68097 310.02856 l
h
752.73376 316.05881 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1816.6088 119.06618 m
1808.0834 119.6296 l
1810.556 125.09642 l
h
1816.6088 119.06618 m
S
1 J
1 j
0.60000002 i
1971.5197 207.71376 m
1935.0804 191.56058 1929.2605 142.73709 1962.4418 122.71211 c
S
0 i
CM
905.7746 315.88638 m
897.26538 315.11591 l
899.87012 309.71078 l
h
905.7746 315.88638 m
f
0 J
0 j
1 0 0 -1 -1063.875 435.125 cm
1969.6495 119.23862 m
1961.1404 120.00909 l
1963.7451 125.4142 l
h
1969.6495 119.23862 m
S
/Cs2 SC
0 sc
1 0 0 -1 840.75 35.125 cm
-40.215 5.0500183 m
(+,"-.,*\)%)[ 4.890000 7.740000 11.730000 7.380000 11.010000 7.740000 4.890000 12.360000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
