%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 555.250000 197.250000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 556 198
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 556 198
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /one put
dup 35 /two put
dup 36 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/C 4 def
/uni2B91 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec

A6F9E00007A782C94355D3F25DC0CD07F0DA6AD658BFBC2B6F02870504E66372AD38647D466CCD5D8098FB36F886E798DE09DFF7F22583DBDC11EB96FB1F46C01A442E551F037AEEA0A6C19492BD092901DD1794DAF2C95B22C218786BA726A0CB1194E402289B200D328F40B78A0D5FE80A9F8709A92BB7150367ACC1101ABF8A071DD6A6312E1D79497947CEC4C9582DCBA4145CA891EE50BA80511E7E093F8CBA291C0D3E3D842D479389B636E9CD0C9332D012FFC1024C501B8D5B49C3447C7D94E57A9FD0C541BB748B5C5359327CE648AF605DD3DC70817358B74FAAD9ADB5E31FC713EFEF11E29A66717EB53988F935BE4CA197E205D60D6B1C3F6C4004E2EDCBBF56B59B0AB9CADE48503EC249B8EBB55B8A168FFEE95E9B21D283834628FD6C35C9155D532257874DC778B68A2A09B9D01B04275FF4F733E9124BD122BDE5038E43F59441A2DBAD55E07D0A9C70CBFD96E64CBED5F9C98C00331B240F0D5ED8006E251F3704F6EB377DC0ED0DFDBD5D82CD843F3CAD16539F1A846C8A7A1392BC15BA266A2E1FDD4EB807BDF8335EE584575CC45C23A4ED68908DC9DCBEB12287E6F2E6FA279A5E7DA3139A6D03EB0B1421F9662B77ED084B6F5971357ECC135522ABD09B7B4A2824A3BF90A6973484883AA23B88B6D051BF67A62F282AC3F5D189B9B8DCDF240459270341C2A1D6CF9A7B01A8397950A1EF62B66DA8EF9382E33D26FD6BADC389CB2D9341F6BA969FE3395B4B1D7178F3ADCB7A285B8305F30352733A61D3D5759650181A658EA0068FDE82834B462C7334743C87B01DAC1F112215F0830D11F9EC780F31C88611BBAE54765D7CCA152274E78103795C8F91B9CE376A6849A3C50DEF2BCE49F259AF78E670952E752EA40DEA224C6D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Thonburi
%!FontType1-1.0: Thonburi 1.0000.1.0000
14 dict begin/FontName /Thonburi def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /m put
dup 34 /one put
dup 35 /colon put
dup 36 /two put
dup 37 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2560 -1531 1 index div -1463 2 index div 3957 3 index div 3585 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/colon 4 def
/m 5 def
/luthai_saraaathai 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.000390625 0 0 0.000390625 0 0 ] def
/FontBBox{-1531 -1463 3957 3585}def
/UniqueID 4158355 def
currentdict currentfile eexec

8529CDE135D43E5746B7415E5E22433B2D685EA1978049C94065AEBB68A7ACF7DF837AC468FCC1A6D17A5B018A701DE8A4E38403405DF715B4C30A59A8A0223125A1BC66295515CB3FB82E4941EE69E12BBC9846E06093977CEE1815C659287C5F90524F482047D5D2120043642AB4AB12624D37656161564F8A77AD6C43558645967519193CDFAB62ECC4BB3C4D0168BA16DE7B2D14CE9E6DB66F216B93F3BDFE7EEAF755AD7C1E758C00D271C1EA88927038B722E8FCA0F188152342C51A849A6FBC846F2C252BE7C37B11F0069867678930552F7D1FA2E6D4893556A4A12CD1FFF5656FDC4767E790D612C8BFDC0FC8764089088322CBB53A8CA705F7EF6F50C458A312F98BCD8ACF94721653CD9D0CA0220D9DB7D5CD9C8DB05F1C9DA19C19E2C3A018307D73C2DFEAA3E6248881EDB628577717D39F95E863A88AC873806B369C5A5C9F6BD352A50BB86D8782825F2C7A77733643EDC7F98776850DEFF034FFB779F0DBC1A5699D8408C47533E8AFDCC1C2E938A04EABA9580B1D5628EB62C14BA84FD51EDAFDE3546DB0FFC7AF4238D61A84FFE4E8E6C883866DD576B4476666D8DD4244ED4E95D56B185A3AB71ED77A23432D5975FA69DC5E062460E6F5BA9F6A669401D76AF98D6F38A4D328D3191059096E580A8AC4DD80A95811FA90FF947C1DF75B80E98C13E22F6E1524265AABD0109DE458BA12D27218365F34EBD35C40E904F1AE5BFC5F1CEF4D9A08328DDF519A8EFCD46221E402870B4389B36A10F398D2C86DAFFA967C1AB78D993761A5680A90ECF69D38F0EA978EB820026D47ECCAE0CA10C59C838A9D9E1EA0F2BE6450C854D7F9D348719E6E2F2EDD133C13A87EE55B5FABC86D8309F888D7D2A480E091A9C6888C693546908F720A2AB8F6C54DCC8E737B9805E892BF745D74C234AFF6138BC00FBD1AB42C0A73D1739FC57D8460E449E583A0A3F6BBE09A9AF0BF2705D990BBFDD6283F4CD19535BA17DC1ECA71564641C92B0CD3ABE90AD3A641E2231834DEF8B247D1282942A20AB43B16F2BF0ECC963C22B40E251FBA9329F2FFB29C02854E677382DAA7ACE13131991550BB305E675EDF3C4C38C528BAD9F1DEB638839153ECDA149F968BBC16E2791AAF8E104F00A3CBADE4C01FB17E14F73E5FBCCDBF417FD1E80B4A9F91F666EDE5B85F11E184275449303F790011FF1398E3B16C04F95F7926106D155693492F4571DFB3132FA768E81E906D26
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Thonburi cguidfix
/F2.1/Thonburi renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 555.25 197.25 rc
-293.875 1392.125 m
1992.125 1392.125 l
1992.125 -803.875 l
-293.875 -803.875 l
h
-293.875 1392.125 m
f
58.216862 115.21687 m
68.761063 104.67271 68.761063 87.577286 58.216862 77.033134 c
47.672714 66.488937 30.577286 66.488937 20.033138 77.033134 c
9.4889364 87.577286 9.4889364 104.67271 20.033138 115.21687 c
30.577286 125.76106 47.672714 125.76106 58.216862 115.21687 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -293.875 1392.125 cm
352.09186 1276.9081 m
362.63608 1287.4523 362.63608 1304.5477 352.09186 1315.0919 c
341.5477 1325.6361 324.4523 1325.6361 313.90814 1315.0919 c
303.36392 1304.5477 303.36392 1287.4523 313.90814 1276.9081 c
324.4523 1266.3639 341.5477 1266.3639 352.09186 1276.9081 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 39.125 96.125 cm
/F1.1[ 16 0 0 -16 0 0]sf
-10.224 2.276001 m
(!)s
1.3279999 9.276001 m
(")s
/Cs1 SC
1 1 1 sc
CM
296.71686 115.21687 m
307.26108 104.67271 307.26108 87.577286 296.71686 77.033134 c
286.1727 66.488937 269.0773 66.488937 258.53314 77.033134 c
247.98894 87.577286 247.98894 104.67271 258.53314 115.21687 c
269.0773 125.76106 286.1727 125.76106 296.71686 115.21687 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -293.875 1392.125 cm
590.59186 1276.9081 m
601.13605 1287.4523 601.13605 1304.5477 590.59186 1315.0919 c
580.04773 1325.6361 562.95227 1325.6361 552.40814 1315.0919 c
541.86395 1304.5477 541.86395 1287.4523 552.40814 1276.9081 c
562.95227 1266.3639 580.04773 1266.3639 590.59186 1276.9081 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 277.625 96.125 cm
-10.224 2.276001 m
(!)s
1.3279999 9.276001 m
(#)s
/Cs1 SC
1 1 1 sc
CM
535.21686 115.21687 m
545.76105 104.67271 545.76105 87.577286 535.21686 77.033134 c
524.67273 66.488937 507.5773 66.488937 497.03314 77.033134 c
486.48892 87.577286 486.48892 104.67271 497.03314 115.21687 c
507.5773 125.76106 524.67273 125.76106 535.21686 115.21687 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -293.875 1392.125 cm
829.09186 1276.9081 m
839.63605 1287.4523 839.63605 1304.5477 829.09186 1315.0919 c
818.54773 1325.6361 801.45227 1325.6361 790.90814 1315.0919 c
780.36395 1304.5477 780.36395 1287.4523 790.90814 1276.9081 c
801.45227 1266.3639 818.54773 1266.3639 829.09186 1276.9081 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 516.125 96.125 cm
-10.224 2.276001 m
(!)s
1.3279999 9.276001 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -293.875 1392.125 cm
343.87076 1271.2771 m
382.3255 1211.665 486.41431 1221.8234 546.02283 1269.3999 c
S
0 i
CM
258.23145 117.53024 m
254.09581 125.00664 l
250.19957 120.44382 l
h
258.23145 117.53024 m
f
0 J
0 j
1 0 0 -1 -293.875 1392.125 cm
552.10645 1274.5947 m
547.97083 1267.1184 l
544.07458 1271.6812 l
h
552.10645 1274.5947 m
S
1 J
1 j
0.60000002 i
586.93805 1273.8435 m
640.94513 1208.1034 726.38342 1209.8645 786.18744 1267.855 c
S
0 i
CM
497.9007 118.54665 m
494.45831 126.36649 l
490.16531 122.17484 l
h
497.9007 118.54665 m
f
0 J
0 j
1 0 0 -1 -293.875 1392.125 cm
791.7757 1273.5784 m
788.33331 1265.7585 l
784.04028 1269.9502 l
h
791.7757 1273.5784 m
S
1 J
1 j
0.60000002 i
339.79547 1322.1354 m
371.65848 1398.1208 489.4873 1357.796 544.46442 1320.9467 c
S
0 i
CM
257.11377 75.804482 m
248.85257 73.624496 l
252.323 68.729996 l
h
257.11377 75.804482 m
f
0 J
0 j
1 0 0 -1 -293.875 1392.125 cm
550.98877 1316.3206 m
542.72754 1318.5005 l
546.198 1323.395 l
h
550.98877 1316.3206 m
S
1 J
1 j
0.60000002 i
593.88489 1311.106 m
653.20984 1348.9735 707.75568 1363.9628 780.18384 1317.7209 c
S
0 i
CM
492.97141 78.829498 m
484.64761 76.902168 l
487.96735 71.904228 l
h
492.97141 78.829498 m
f
0 J
0 j
1 0 0 -1 -293.875 1392.125 cm
786.84637 1313.2955 m
778.52264 1315.2228 l
781.84235 1320.2208 l
h
786.84637 1313.2955 m
S
1 J
1 j
0.60000002 i
360 1296 m
534.59998 1296 l
S
0 i
CM
248.72499 96.125 m
240.72499 99.125 l
240.72499 93.125 l
h
248.72499 96.125 m
f
0 J
0 j
1 0 0 -1 -293.875 1392.125 cm
542.59998 1296 m
534.59998 1293 l
534.59998 1299 l
h
542.59998 1296 m
S
1 1 1 sc
CM
103.02463 180.52579 m
179.02463 180.52579 l
179.02463 143.52579 l
103.02463 143.52579 l
h
103.02463 180.52579 m
f
/Cs2 SC
0 sc
1 0 0 -1 141.02463 162.02579 cm
/F2.1[ 16 0 0 -16 0 0]sf
-32.724998 3.5991821 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
-18.418751 9.5991821 m
("")[ 7.996875 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
-2.425 3.5991821 m
(#!)[ 4.850000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
16.731251 9.5991821 m
($")[ 7.996875 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
105.77888 114.625 m
181.77887 114.625 l
181.77887 77.625 l
105.77888 77.625 l
h
105.77888 114.625 m
f
/Cs2 SC
0 sc
1 0 0 -1 143.77887 96.125 cm
/F2.1[ 16 0 0 -16 0 0]sf
-32.724998 3.5991821 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
-18.418751 9.5991821 m
("")[ 7.996875 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
-2.425 3.5991821 m
(#!)[ 4.850000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
16.731251 9.5991821 m
($$)[ 7.996875 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
109.75404 48.004726 m
185.75404 48.004726 l
185.75404 11.004726 l
109.75404 11.004726 l
h
109.75404 48.004726 m
f
/Cs2 SC
0 sc
1 0 0 -1 147.75404 29.504726 cm
/F2.1[ 16 0 0 -16 0 0]sf
-32.724998 3.5991821 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
-18.418751 9.5991821 m
("$)[ 7.996875 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
-2.425 3.5991821 m
(#!)[ 4.850000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
16.731251 9.5991821 m
($%)[ 7.996875 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
353.09491 186.18196 m
429.09491 186.18196 l
429.09491 149.18196 l
353.09491 149.18196 l
h
353.09491 186.18196 m
f
/Cs2 SC
0 sc
1 0 0 -1 391.09491 167.68196 cm
/F2.1[ 16 0 0 -16 0 0]sf
-32.724998 3.5991821 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
-18.418751 9.5991821 m
($")[ 7.996875 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
-2.425 3.5991821 m
(#!)[ 4.850000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
16.731251 9.5991821 m
(%")[ 7.996875 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
353.15271 64.442955 m
429.15271 64.442955 l
429.15271 27.442957 l
353.15271 27.442957 l
h
353.15271 64.442955 m
f
/Cs2 SC
0 sc
1 0 0 -1 391.15271 45.942955 cm
/F2.1[ 16 0 0 -16 0 0]sf
-32.724998 3.5991821 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
-18.418751 9.5991821 m
($$)[ 7.996875 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
-2.425 3.5991821 m
(#!)[ 4.850000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
16.731251 9.5991821 m
(%$)[ 7.996875 0.000000 ] xS
ep
end
%%Trailer
%%EOF
